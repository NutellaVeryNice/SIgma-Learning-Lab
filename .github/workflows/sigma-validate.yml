name: Sigma Rule Conversion and Aggregation

on:
  push:
    paths:
      - 'HomoglyphRelatedRules/**'
      - 'BruteForce/**'
      - 'DefenseEvasion/**'
      - 'Phishing/SuspiciousFileOpen/**'
      - '.github/workflows/sigma-convert.yml'
  workflow_dispatch:

jobs:
  convert:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install sigma-cli with required backends
        run: |
          pip install 'sigma-cli[target-elasticsearch,target-kusto,target-splunk]'

      - name: Convert and aggregate Sigma rules
        run: |
          mkdir -p converted
          : > converted/all-kql.kql
          : > converted/all-spl.spl
          : > converted/all-elastic.json

          fail_count=0
          rule_count=0

          for rule in $(find HomoglyphRelatedRules/ BruteForce/ DefenseEvasion/ Phishing/SuspiciousFileOpen/ -name '*.yml'); do
            base_name=$(basename "$rule" .yml)
            echo "🔄 Converting $rule ..."

            # --- KQL ---
            echo -e "\n### $base_name" >> converted/all-kql.kql
            kql_output=$(sigma convert --target kusto "$rule" 2>&1)
            kql_status=$?
            if [[ $kql_status -eq 0 && -n "$kql_output" ]]; then
              echo "$kql_output" >> converted/all-kql.kql
              echo "✅ KQL: $rule"
            else
              echo "⚠️ KQL conversion failed: $rule"
              echo "$kql_output"
              fail_count=$((fail_count+1))
            fi

            # --- Splunk ---
            echo -e "\n### $base_name" >> converted/all-spl.spl
            spl_output=$(sigma convert --target splunk "$rule" 2>&1)
            spl_status=$?
            if [[ $spl_status -eq 0 && -n "$spl_output" ]]; then
              echo "$spl_output" >> converted/all-spl.spl
              echo "✅ Splunk: $rule"
            else
              echo "⚠️ Splunk conversion failed: $rule"
              echo "$spl_output"
              fail_count=$((fail_count+1))
            fi

            # --- Elastic DSL ---
            echo -e "\n### $base_name" >> converted/all-elastic.json
            es_output=$(sigma convert --target elasticsearch "$rule" 2>&1)
            es_status=$?
            if [[ $es_status -eq 0 && -n "$es_output" ]]; then
              echo "$es_output" >> converted/all-elastic.json
              echo "✅ Elastic: $rule"
            else
              echo "⚠️ Elastic conversion failed: $rule"
              echo "$es_output"
              fail_count=$((fail_count+1))
            fi

            rule_count=$((rule_count+1))
          done

          echo "🔚 Finished converting $rule_count rule(s) with $fail_count failure(s)."
