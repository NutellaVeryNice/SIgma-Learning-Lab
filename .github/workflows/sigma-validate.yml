name: Sigma Validate + Convert + Upload

on:
  push:
    paths:
      - 'HomoglyphRelatedRules/**/*.yml'
      - 'BruteForce/**/*.yml'
      - 'DefenseEvasion/**/*.yml'
      - 'Phishing/SuspiciousFileOpen/**/*.yml'
  pull_request:
    paths:
      - 'HomoglyphRelatedRules/**/*.yml'
      - 'BruteForce/**/*.yml'
      - 'DefenseEvasion/**/*.yml'
      - 'Phishing/SuspiciousFileOpen/**/*.yml'
  workflow_dispatch:

jobs:
  validate-convert-upload:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install sigma-cli and plugins
        run: |
          pip install sigma-cli
          sigma plugin install target-elasticsearch
          sigma plugin install target-kusto
          sigma plugin install target-splunk

      - name: Validate Sigma Rules
        run: |
          echo "üîç Validating Sigma rules..."
          for rule in $(find HomoglyphRelatedRules/ BruteForce/ DefenseEvasion/ Phishing/SuspiciousFileOpen/ -name '*.yml'); do
            echo "‚úÖ Checking $rule"
            if ! sigma validate "$rule"; then
              echo "‚ùå Invalid rule: $rule"
              exit 1
            fi
          done
          echo "‚úÖ All rules passed validation."

      - name: Convert and Aggregate Sigma Rules
        run: |
          mkdir -p converted
          : > converted/all-kql.kql
          : > converted/all-spl.spl
          : > converted/all-elastic.json

          fail_count=0
          rule_count=0

          for rule in $(find HomoglyphRelatedRules/ BruteForce/ DefenseEvasion/ Phishing/SuspiciousFileOpen/ -name '*.yml'); do
            base_name=$(basename "$rule" .yml)
            echo "üîÑ Converting $rule ..."

            # --- KQL ---
            echo -e "\n### $base_name" >> converted/all-kql.kql
            kql_output=$(sigma convert --target kusto "$rule" 2>&1)
            kql_status=$?
            if [[ $kql_status -eq 0 && -n "$kql_output" ]]; then
              echo "$kql_output" >> converted/all-kql.kql
              echo "‚úÖ KQL: $rule"
            else
              echo "‚ö†Ô∏è KQL conversion failed: $rule"
              echo "$kql_output"
              fail_count=$((fail_count+1))
            fi

            # --- Splunk ---
            echo -e "\n### $base_name" >> converted/all-spl.spl
            spl_output=$(sigma convert --target splunk "$rule" 2>&1)
            spl_status=$?
            if [[ $spl_status -eq 0 && -n "$spl_output" ]]; then
              echo "$spl_output" >> converted/all-spl.spl
              echo "‚úÖ Splunk: $rule"
            else
              echo "‚ö†Ô∏è Splunk conversion failed: $rule"
              echo "$spl_output"
              fail_count=$((fail_count+1))
            fi

            # --- Elastic DSL ---
            echo -e "\n### $base_name" >> converted/all-elastic.json
            es_output=$(sigma convert --target elasticsearch "$rule" 2>&1)
            es_status=$?
            if [[ $es_status -eq 0 && -n "$es_output" ]]; then
              echo "$es_output" >> converted/all-elastic.json
              echo "‚úÖ Elastic: $rule"
            else
              echo "‚ö†Ô∏è Elastic conversion failed: $rule"
              echo "$es_output"
              fail_count=$((fail_count+1))
            fi

            rule_count=$((rule_count+1))
          done

          echo "üîö Finished converting $rule_count rule(s) with $fail_count failure(s)."

      - name: Upload all converted Sigma outputs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sigma-converted-all
          path: converted/
          if-no-files-found: error
