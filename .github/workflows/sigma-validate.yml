name: Sigma Validate + Convert + Upload (Combined Files)

on:
  push:
    paths:
      - 'HomoglyphRelatedRules/**/*.yml'
      - 'BruteForce/**/*.yml'
      - 'DefenseEvasion/**/*.yml'
      - 'Phishing/SuspiciousFileOpen/**/*.yml'
  pull_request:
    paths:
      - 'HomoglyphRelatedRules/**/*.yml'
      - 'BruteForce/**/*.yml'
      - 'DefenseEvasion/**/*.yml'
      - 'Phishing/SuspiciousFileOpen/**/*.yml'
  workflow_dispatch:

jobs:
  validate-convert-upload:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install sigma-cli
        run: pip install sigma-cli

      - name: Validate Sigma Rules
        run: |
          echo "üîç Validating Sigma rules..."
          for rule in $(find HomoglyphRelatedRules/ BruteForce/ DefenseEvasion/ Phishing/SuspiciousFileOpen/ -name '*.yml'); do
            echo "‚úÖ Checking $rule"
            if ! sigma check "$rule"; then
              echo "‚ùå Invalid rule: $rule"
              exit 1
            fi
          done
          echo "‚úÖ All rules passed validation."

      - name: Convert & Concatenate Sigma Rules
        run: |
          mkdir -p converted
          touch converted/all-kql.kql
          touch converted/all-spl.spl
          touch converted/all-elastic.json

          fail_count=0
          rule_count=0

          for rule in $(find HomoglyphRelatedRules/ BruteForce/ DefenseEvasion/ Phishing/SuspiciousFileOpen/ -name '*.yml'); do
            base_name=$(basename "$rule" .yml)
            echo "üîÑ Converting $rule ..."

            # KQL
            echo -e "\n### $base_name" >> converted/all-kql.kql
            if sigma convert --target kusto --pipeline azure_monitor --query-table AuditLogs "$rule" >> converted/all-kql.kql; then
              echo "‚úÖ KQL converted: $base_name"
            else
              echo "‚ö†Ô∏è KQL conversion failed: $base_name"
              fail_count=$((fail_count+1))
            fi

            # Splunk
            echo -e "\n### $base_name" >> converted/all-spl.spl
            if sigma convert --target splunk "$rule" >> converted/all-spl.spl; then
              echo "‚úÖ Splunk converted: $base_name"
            else
              echo "‚ö†Ô∏è Splunk conversion failed: $base_name"
              fail_count=$((fail_count+1))
            fi

            # Elastic
            echo -e "\n### $base_name" >> converted/all-elastic.json
            if sigma convert --target es-dsl "$rule" >> converted/all-elastic.json; then
              echo "‚úÖ Elastic DSL converted: $base_name"
            else
              echo "‚ö†Ô∏è Elastic conversion failed: $base_name"
              fail_count=$((fail_count+1))
            fi

            rule_count=$((rule_count+1))
          done

          echo "‚úÖ Converted $rule_count rule(s) with $fail_count failure(s)."

      - name: Upload Combined KQL
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: kql-all
          path: converted/all-kql.kql
          if-no-files-found: warn

      - name: Upload Combined Splunk
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: splunk-all
          path: converted/all-spl.spl
          if-no-files-found: warn

      - name: Upload Combined Elastic DSL
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: elastic-all
          path: converted/all-elastic.json
          if-no-files-found: warn
