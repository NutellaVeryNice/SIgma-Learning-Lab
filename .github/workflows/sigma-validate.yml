name: Sigma Validate + Convert + Upload

on:
  push:
    paths:
      - 'HomoglyphRelatedRules/**/*.yml'
      - 'BruteForce/**/*.yml'
      - 'DefenseEvasion/**/*.yml'
      - 'Phishing/SuspiciousFileOpen/**/*.yml'
  pull_request:
    paths:
      - 'HomoglyphRelatedRules/**/*.yml'
      - 'BruteForce/**/*.yml'
      - 'DefenseEvasion/**/*.yml'
      - 'Phishing/SuspiciousFileOpen/**/*.yml'
  workflow_dispatch:

jobs:
  validate-convert-upload:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install sigma-cli
        run: |
          pip install sigma-cli

      - name: Validate Sigma Rules
        run: |
          sigma check HomoglyphRelatedRules/ BruteForce/ DefenseEvasion/ Phishing/SuspiciousFileOpen/

      - name: Convert Sigma Rules (KQL, Splunk, Elastic)
        run: |
          mkdir -p converted/kql converted/splunk converted/elastic
          fail_count=0

          for rule in $(find HomoglyphRelatedRules/ BruteForce/ DefenseEvasion/ Phishing/SuspiciousFileOpen/ -name '*.yml'); do
            base_name=$(basename "$rule" .yml)

            echo "üîÑ Converting $rule ..."

            # Convert to KQL
            if sigma convert --target kusto --pipeline azure_monitor --query-table AuditLogs "$rule" > "converted/kql/${base_name}.kql"; then
              echo "‚úÖ KQL: $rule converted successfully"
            else
              echo "‚ö†Ô∏è Failed to convert $rule to KQL"
              rm -f "converted/kql/${base_name}.kql"
              fail_count=$((fail_count+1))
            fi

            # Convert to Splunk
            if sigma convert --target splunk "$rule" > "converted/splunk/${base_name}.spl"; then
              echo "‚úÖ Splunk: $rule converted successfully"
            else
              echo "‚ö†Ô∏è Failed to convert $rule to Splunk"
              rm -f "converted/splunk/${base_name}.spl"
              fail_count=$((fail_count+1))
            fi

            # Convert to Elastic DSL
            if sigma convert --target es-dsl "$rule" > "converted/elastic/${base_name}.json"; then
              echo "‚úÖ Elastic: $rule converted successfully"
            else
              echo "‚ö†Ô∏è Failed to convert $rule to Elastic DSL"
              rm -f "converted/elastic/${base_name}.json"
              fail_count=$((fail_count+1))
            fi
          done

          echo "üîö Conversion finished with $fail_count failure(s)."

      - name: Upload converted KQL rules
        uses: actions/upload-artifact@v4
        with:
          name: kql-detection-rules
          path: converted/kql/

      - name: Upload converted Splunk rules
        uses: actions/upload-artifact@v4
        with:
          name: splunk-detection-rules
          path: converted/splunk/

      - name: Upload converted Elastic rules
        uses: actions/upload-artifact@v4
        with:
          name: elastic-detection-rules
          path: converted/elastic/
